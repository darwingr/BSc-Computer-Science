/* main.cpp (TestGraph.cpp)
 * ------------------------
 * Authors: Darwin Jacob Groskleg, Man Lin
 *
 * Purpose: to rewrite the Best_Path method on Weighted_Graph to show the
 *          detailed steps of the shortest path algorithm.
 *
 * CONSOLE SAMPLE
--------------------------------------------------------------------------------
This is the Weighted Graph Demo

       1    2    3    4    5    6 
   1   0    0    1    0    0    0 
   2   3    0    5    0    0    0 
   3   0    0    0    2    4    0 
   4   5    0    0    0    0    5 
   5   0    0    0    0    0    1 
   6   0    0    0    0    0    0 


Start: 1
Destination: 6
Adding node 1 to the solved set S={1 }
Adding node 3 to the solved set S={1 3 }
Updating labels for node 4
	distance: 2147483647 -> 3
	parent:   -1 -> 3
	Node labels: 
	    1(d:0, p:-1) 2(d:2147483647, p:-1) 3(d:1, p:1) 
	    4(d:3, p:3) 5(d:2147483647, p:-1) 6(d:2147483647, p:-1) 
	    7(d:2147483647, p:-1) 8(d:2147483647, p:-1) 9(d:2147483647, p:-1) 
	    10(d:2147483647, p:-1) 11(d:2147483647, p:-1) 12(d:2147483647, p:-1) 
	    13(d:2147483647, p:-1) 14(d:2147483647, p:-1) 15(d:2147483647, p:-1) 
	    16(d:2147483647, p:-1) 17(d:2147483647, p:-1) 18(d:2147483647, p:-1) 
	    19(d:2147483647, p:-1) 20(d:2147483647, p:-1) 21(d:2147483647, p:-1) 
	    22(d:2147483647, p:-1) 23(d:2147483647, p:-1) 24(d:2147483647, p:-1) 
	    25(d:2147483647, p:-1) 26(d:2147483647, p:-1) 27(d:2147483647, p:-1) 
	    28(d:2147483647, p:-1) 29(d:2147483647, p:-1) 30(d:2147483647, p:-1) 
	    31(d:2147483647, p:-1) 32(d:2147483647, p:-1) 33(d:2147483647, p:-1) 
	    34(d:2147483647, p:-1) 35(d:2147483647, p:-1) 36(d:2147483647, p:-1) 
	    37(d:2147483647, p:-1) 38(d:2147483647, p:-1) 39(d:2147483647, p:-1) 
	    40(d:2147483647, p:-1) 41(d:2147483647, p:-1) 42(d:2147483647, p:-1) 
	    43(d:2147483647, p:-1) 44(d:2147483647, p:-1) 45(d:2147483647, p:-1) 
	    46(d:2147483647, p:-1) 47(d:2147483647, p:-1) 48(d:2147483647, p:-1) 
	    49(d:2147483647, p:-1) 50(d:2147483647, p:-1) 51(d:2147483647, p:-1) 
	    52(d:2147483647, p:-1) 53(d:2147483647, p:-1) 54(d:2147483647, p:-1) 
	    55(d:2147483647, p:-1) 56(d:2147483647, p:-1) 57(d:2147483647, p:-1) 
	    58(d:2147483647, p:-1) 59(d:2147483647, p:-1) 60(d:2147483647, p:-1) 
	    61(d:2147483647, p:-1) 62(d:2147483647, p:-1) 63(d:2147483647, p:-1) 
	    64(d:2147483647, p:-1) 65(d:2147483647, p:-1) 66(d:2147483647, p:-1) 
	    67(d:2147483647, p:-1) 68(d:2147483647, p:-1) 69(d:2147483647, p:-1) 
	    70(d:2147483647, p:-1) 71(d:2147483647, p:-1) 72(d:2147483647, p:-1) 
	    73(d:2147483647, p:-1) 74(d:2147483647, p:-1) 75(d:2147483647, p:-1) 
	    76(d:2147483647, p:-1) 77(d:2147483647, p:-1) 78(d:2147483647, p:-1) 
	    79(d:2147483647, p:-1) 80(d:2147483647, p:-1) 81(d:2147483647, p:-1) 
	    82(d:2147483647, p:-1) 83(d:2147483647, p:-1) 84(d:2147483647, p:-1) 
	    85(d:2147483647, p:-1) 86(d:2147483647, p:-1) 87(d:2147483647, p:-1) 
	    88(d:2147483647, p:-1) 89(d:2147483647, p:-1) 90(d:2147483647, p:-1) 
	    91(d:2147483647, p:-1) 92(d:2147483647, p:-1) 93(d:2147483647, p:-1) 
	    94(d:2147483647, p:-1) 95(d:2147483647, p:-1) 96(d:2147483647, p:-1) 
	    97(d:2147483647, p:-1) 98(d:2147483647, p:-1) 99(d:2147483647, p:-1) 
	    100(d:2147483647, p:-1) 
Updating labels for node 5
	distance: 2147483647 -> 5
	parent:   -1 -> 3
	Node labels: 
	    1(d:0, p:-1) 2(d:2147483647, p:-1) 3(d:1, p:1) 
	    4(d:3, p:3) 5(d:5, p:3) 6(d:2147483647, p:-1) 
	    7(d:2147483647, p:-1) 8(d:2147483647, p:-1) 9(d:2147483647, p:-1) 
	    10(d:2147483647, p:-1) 11(d:2147483647, p:-1) 12(d:2147483647, p:-1) 
	    13(d:2147483647, p:-1) 14(d:2147483647, p:-1) 15(d:2147483647, p:-1) 
	    16(d:2147483647, p:-1) 17(d:2147483647, p:-1) 18(d:2147483647, p:-1) 
	    19(d:2147483647, p:-1) 20(d:2147483647, p:-1) 21(d:2147483647, p:-1) 
	    22(d:2147483647, p:-1) 23(d:2147483647, p:-1) 24(d:2147483647, p:-1) 
	    25(d:2147483647, p:-1) 26(d:2147483647, p:-1) 27(d:2147483647, p:-1) 
	    28(d:2147483647, p:-1) 29(d:2147483647, p:-1) 30(d:2147483647, p:-1) 
	    31(d:2147483647, p:-1) 32(d:2147483647, p:-1) 33(d:2147483647, p:-1) 
	    34(d:2147483647, p:-1) 35(d:2147483647, p:-1) 36(d:2147483647, p:-1) 
	    37(d:2147483647, p:-1) 38(d:2147483647, p:-1) 39(d:2147483647, p:-1) 
	    40(d:2147483647, p:-1) 41(d:2147483647, p:-1) 42(d:2147483647, p:-1) 
	    43(d:2147483647, p:-1) 44(d:2147483647, p:-1) 45(d:2147483647, p:-1) 
	    46(d:2147483647, p:-1) 47(d:2147483647, p:-1) 48(d:2147483647, p:-1) 
	    49(d:2147483647, p:-1) 50(d:2147483647, p:-1) 51(d:2147483647, p:-1) 
	    52(d:2147483647, p:-1) 53(d:2147483647, p:-1) 54(d:2147483647, p:-1) 
	    55(d:2147483647, p:-1) 56(d:2147483647, p:-1) 57(d:2147483647, p:-1) 
	    58(d:2147483647, p:-1) 59(d:2147483647, p:-1) 60(d:2147483647, p:-1) 
	    61(d:2147483647, p:-1) 62(d:2147483647, p:-1) 63(d:2147483647, p:-1) 
	    64(d:2147483647, p:-1) 65(d:2147483647, p:-1) 66(d:2147483647, p:-1) 
	    67(d:2147483647, p:-1) 68(d:2147483647, p:-1) 69(d:2147483647, p:-1) 
	    70(d:2147483647, p:-1) 71(d:2147483647, p:-1) 72(d:2147483647, p:-1) 
	    73(d:2147483647, p:-1) 74(d:2147483647, p:-1) 75(d:2147483647, p:-1) 
	    76(d:2147483647, p:-1) 77(d:2147483647, p:-1) 78(d:2147483647, p:-1) 
	    79(d:2147483647, p:-1) 80(d:2147483647, p:-1) 81(d:2147483647, p:-1) 
	    82(d:2147483647, p:-1) 83(d:2147483647, p:-1) 84(d:2147483647, p:-1) 
	    85(d:2147483647, p:-1) 86(d:2147483647, p:-1) 87(d:2147483647, p:-1) 
	    88(d:2147483647, p:-1) 89(d:2147483647, p:-1) 90(d:2147483647, p:-1) 
	    91(d:2147483647, p:-1) 92(d:2147483647, p:-1) 93(d:2147483647, p:-1) 
	    94(d:2147483647, p:-1) 95(d:2147483647, p:-1) 96(d:2147483647, p:-1) 
	    97(d:2147483647, p:-1) 98(d:2147483647, p:-1) 99(d:2147483647, p:-1) 
	    100(d:2147483647, p:-1) 
Adding node 4 to the solved set S={1 3 4 }
Updating labels for node 6
	distance: 2147483647 -> 8
	parent:   -1 -> 4
	Node labels: 
	    1(d:0, p:-1) 2(d:2147483647, p:-1) 3(d:1, p:1) 
	    4(d:3, p:3) 5(d:5, p:3) 6(d:8, p:4) 
	    7(d:2147483647, p:-1) 8(d:2147483647, p:-1) 9(d:2147483647, p:-1) 
	    10(d:2147483647, p:-1) 11(d:2147483647, p:-1) 12(d:2147483647, p:-1) 
	    13(d:2147483647, p:-1) 14(d:2147483647, p:-1) 15(d:2147483647, p:-1) 
	    16(d:2147483647, p:-1) 17(d:2147483647, p:-1) 18(d:2147483647, p:-1) 
	    19(d:2147483647, p:-1) 20(d:2147483647, p:-1) 21(d:2147483647, p:-1) 
	    22(d:2147483647, p:-1) 23(d:2147483647, p:-1) 24(d:2147483647, p:-1) 
	    25(d:2147483647, p:-1) 26(d:2147483647, p:-1) 27(d:2147483647, p:-1) 
	    28(d:2147483647, p:-1) 29(d:2147483647, p:-1) 30(d:2147483647, p:-1) 
	    31(d:2147483647, p:-1) 32(d:2147483647, p:-1) 33(d:2147483647, p:-1) 
	    34(d:2147483647, p:-1) 35(d:2147483647, p:-1) 36(d:2147483647, p:-1) 
	    37(d:2147483647, p:-1) 38(d:2147483647, p:-1) 39(d:2147483647, p:-1) 
	    40(d:2147483647, p:-1) 41(d:2147483647, p:-1) 42(d:2147483647, p:-1) 
	    43(d:2147483647, p:-1) 44(d:2147483647, p:-1) 45(d:2147483647, p:-1) 
	    46(d:2147483647, p:-1) 47(d:2147483647, p:-1) 48(d:2147483647, p:-1) 
	    49(d:2147483647, p:-1) 50(d:2147483647, p:-1) 51(d:2147483647, p:-1) 
	    52(d:2147483647, p:-1) 53(d:2147483647, p:-1) 54(d:2147483647, p:-1) 
	    55(d:2147483647, p:-1) 56(d:2147483647, p:-1) 57(d:2147483647, p:-1) 
	    58(d:2147483647, p:-1) 59(d:2147483647, p:-1) 60(d:2147483647, p:-1) 
	    61(d:2147483647, p:-1) 62(d:2147483647, p:-1) 63(d:2147483647, p:-1) 
	    64(d:2147483647, p:-1) 65(d:2147483647, p:-1) 66(d:2147483647, p:-1) 
	    67(d:2147483647, p:-1) 68(d:2147483647, p:-1) 69(d:2147483647, p:-1) 
	    70(d:2147483647, p:-1) 71(d:2147483647, p:-1) 72(d:2147483647, p:-1) 
	    73(d:2147483647, p:-1) 74(d:2147483647, p:-1) 75(d:2147483647, p:-1) 
	    76(d:2147483647, p:-1) 77(d:2147483647, p:-1) 78(d:2147483647, p:-1) 
	    79(d:2147483647, p:-1) 80(d:2147483647, p:-1) 81(d:2147483647, p:-1) 
	    82(d:2147483647, p:-1) 83(d:2147483647, p:-1) 84(d:2147483647, p:-1) 
	    85(d:2147483647, p:-1) 86(d:2147483647, p:-1) 87(d:2147483647, p:-1) 
	    88(d:2147483647, p:-1) 89(d:2147483647, p:-1) 90(d:2147483647, p:-1) 
	    91(d:2147483647, p:-1) 92(d:2147483647, p:-1) 93(d:2147483647, p:-1) 
	    94(d:2147483647, p:-1) 95(d:2147483647, p:-1) 96(d:2147483647, p:-1) 
	    97(d:2147483647, p:-1) 98(d:2147483647, p:-1) 99(d:2147483647, p:-1) 
	    100(d:2147483647, p:-1) 
Adding node 5 to the solved set S={1 3 4 5 }
Updating labels for node 6
	distance: 8 -> 6
	parent:   4 -> 5
	Node labels: 
	    1(d:0, p:-1) 2(d:2147483647, p:-1) 3(d:1, p:1) 
	    4(d:3, p:3) 5(d:5, p:3) 6(d:6, p:5) 
	    7(d:2147483647, p:-1) 8(d:2147483647, p:-1) 9(d:2147483647, p:-1) 
	    10(d:2147483647, p:-1) 11(d:2147483647, p:-1) 12(d:2147483647, p:-1) 
	    13(d:2147483647, p:-1) 14(d:2147483647, p:-1) 15(d:2147483647, p:-1) 
	    16(d:2147483647, p:-1) 17(d:2147483647, p:-1) 18(d:2147483647, p:-1) 
	    19(d:2147483647, p:-1) 20(d:2147483647, p:-1) 21(d:2147483647, p:-1) 
	    22(d:2147483647, p:-1) 23(d:2147483647, p:-1) 24(d:2147483647, p:-1) 
	    25(d:2147483647, p:-1) 26(d:2147483647, p:-1) 27(d:2147483647, p:-1) 
	    28(d:2147483647, p:-1) 29(d:2147483647, p:-1) 30(d:2147483647, p:-1) 
	    31(d:2147483647, p:-1) 32(d:2147483647, p:-1) 33(d:2147483647, p:-1) 
	    34(d:2147483647, p:-1) 35(d:2147483647, p:-1) 36(d:2147483647, p:-1) 
	    37(d:2147483647, p:-1) 38(d:2147483647, p:-1) 39(d:2147483647, p:-1) 
	    40(d:2147483647, p:-1) 41(d:2147483647, p:-1) 42(d:2147483647, p:-1) 
	    43(d:2147483647, p:-1) 44(d:2147483647, p:-1) 45(d:2147483647, p:-1) 
	    46(d:2147483647, p:-1) 47(d:2147483647, p:-1) 48(d:2147483647, p:-1) 
	    49(d:2147483647, p:-1) 50(d:2147483647, p:-1) 51(d:2147483647, p:-1) 
	    52(d:2147483647, p:-1) 53(d:2147483647, p:-1) 54(d:2147483647, p:-1) 
	    55(d:2147483647, p:-1) 56(d:2147483647, p:-1) 57(d:2147483647, p:-1) 
	    58(d:2147483647, p:-1) 59(d:2147483647, p:-1) 60(d:2147483647, p:-1) 
	    61(d:2147483647, p:-1) 62(d:2147483647, p:-1) 63(d:2147483647, p:-1) 
	    64(d:2147483647, p:-1) 65(d:2147483647, p:-1) 66(d:2147483647, p:-1) 
	    67(d:2147483647, p:-1) 68(d:2147483647, p:-1) 69(d:2147483647, p:-1) 
	    70(d:2147483647, p:-1) 71(d:2147483647, p:-1) 72(d:2147483647, p:-1) 
	    73(d:2147483647, p:-1) 74(d:2147483647, p:-1) 75(d:2147483647, p:-1) 
	    76(d:2147483647, p:-1) 77(d:2147483647, p:-1) 78(d:2147483647, p:-1) 
	    79(d:2147483647, p:-1) 80(d:2147483647, p:-1) 81(d:2147483647, p:-1) 
	    82(d:2147483647, p:-1) 83(d:2147483647, p:-1) 84(d:2147483647, p:-1) 
	    85(d:2147483647, p:-1) 86(d:2147483647, p:-1) 87(d:2147483647, p:-1) 
	    88(d:2147483647, p:-1) 89(d:2147483647, p:-1) 90(d:2147483647, p:-1) 
	    91(d:2147483647, p:-1) 92(d:2147483647, p:-1) 93(d:2147483647, p:-1) 
	    94(d:2147483647, p:-1) 95(d:2147483647, p:-1) 96(d:2147483647, p:-1) 
	    97(d:2147483647, p:-1) 98(d:2147483647, p:-1) 99(d:2147483647, p:-1) 
	    100(d:2147483647, p:-1) 
Adding node 6 to the solved set S={1 3 4 5 6 }
shortest distance from 1 To 6 is 6
Showing best path:
1
3
5
6

--------------------------------------------------------------------------------
 * END OF CONSOLE SAMPLE
 */
#include <iostream>
#include "graph.hpp"

using namespace std;

int main (void) {
    Weighted_Graph graph(6); // SAY NO TO GLOBALS!

    cerr << "This is the Weighted Graph Demo\n\n";

    graph.Add_Edge(2, 1, 3);
    graph.Add_Edge(2, 3, 5);
    graph.Add_Edge(3, 4, 2);
    graph.Add_Edge(4, 1, 5);
    graph.Add_Edge(1, 3, 1);
    graph.Add_Edge(3, 5, 4);
    graph.Add_Edge(5, 6, 1);
    graph.Add_Edge(4, 6, 5);

    graph.Display();

    int start;
    int dest;

    clog << "\n\n" << "Start: ";
    cin >> start;
    clog << "Destination: ";
    cin >> dest;
    cout << '\n';
    graph.Show_Best_Path(start, dest);

    return 0;
}
